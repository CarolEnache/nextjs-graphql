/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */







declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  Product: { // root type
    brand?: string | null; // String
    colour?: string | null; // String
    description?: string | null; // String
    height?: number | null; // Int
    id: string; // ID!
    img_url?: string | null; // String
    length?: number | null; // Int
    model_code?: string | null; // String
    name?: string | null; // String
    power?: string | null; // String
    price?: number | null; // Int
    quantity?: number | null; // Int
    weight?: number | null; // Int
    width?: number | null; // Int
  }
  Query: {};
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  Product: { // field return type
    brand: string | null; // String
    colour: string | null; // String
    description: string | null; // String
    height: number | null; // Int
    id: string; // ID!
    img_url: string | null; // String
    length: number | null; // Int
    model_code: string | null; // String
    name: string | null; // String
    power: string | null; // String
    price: number | null; // Int
    quantity: number | null; // Int
    weight: number | null; // Int
    width: number | null; // Int
  }
  Query: { // field return type
    Product: NexusGenRootTypes['Product'] | null; // Product
    allProducts: Array<NexusGenRootTypes['Product'] | null> | null; // [Product]
  }
}

export interface NexusGenFieldTypeNames {
  Product: { // field return type name
    brand: 'String'
    colour: 'String'
    description: 'String'
    height: 'Int'
    id: 'ID'
    img_url: 'String'
    length: 'Int'
    model_code: 'String'
    name: 'String'
    power: 'String'
    price: 'Int'
    quantity: 'Int'
    weight: 'Int'
    width: 'Int'
  }
  Query: { // field return type name
    Product: 'Product'
    allProducts: 'Product'
  }
}

export interface NexusGenArgTypes {
  Query: {
    Product: { // args
      id: string; // ID!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}